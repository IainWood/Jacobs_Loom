package readcard;

import java.io.BufferedWriter;
import java.io.FileWriter;
import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;

/**
 * @author Iain Woodburn
 */
public class Dialogue extends javax.swing.JDialog {

    ReadCard rc = new ReadCard();
    
    /**
     * Creates new form Dialogue
     */
    public Dialogue() {
        initComponents();
    }

    private String encrypt(String rawString){
        
        String seed = "password";
        
        StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();
        encryptor.setPassword(seed);
        return encryptor.encrypt(rawString);
    }
    
    private static String decrypt(String encryptedString){
        //Seed must be same as what was used to encrypt origially
        String seed = "password";
        
        StandardPBEStringEncryptor decryptor = new StandardPBEStringEncryptor();
        decryptor.setPassword(seed);
        
        //Decrypts and returns the raw string
        return decryptor.decrypt(encryptedString);
    }
    
    private boolean writeToFile(String text, String filepath, String filename){
        
        try { 
          //Creates new file, even if one already exists, good for security
          FileWriter fWriter = new FileWriter(filepath.concat(filename)); 
            try (BufferedWriter writer = new BufferedWriter(fWriter)) {
                writer.write(text);
                writer.newLine();
            }
          System.out.println(validateInput(decrypt(text)));
          //if error has not been triggered, then proceed
          if(validateInput(decrypt(text))){
              
              //Signals main method that user is done and the information
              //from the card is now in the file and ready to be read
              ReadCard.done = true;
              this.dispose();
          }
        } catch (Exception e) {
            toggleError("Error reading card, please try again");
        }
        
        return false;
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "Convert2Lambda"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        headerBox = new javax.swing.JLabel();
        password_box = new javax.swing.JPasswordField();
        readCardButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        quitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Card Reader");
        setForeground(new java.awt.Color(153, 153, 153));
        setIconImage(null);
        setResizable(false);

        headerBox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        headerBox.setForeground(new java.awt.Color(51, 51, 255));
        headerBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerBox.setText("Swipe card and click Read Card");

        readCardButton.setText("Read Card");
        readCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readCardButton(evt);
            }
        });

        errorLabel.setForeground(new java.awt.Color(255, 0, 0));

        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(71, Short.MAX_VALUE)
                .addComponent(headerBox, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(errorLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(password_box, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(readCardButton))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerBox, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(password_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(readCardButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(quitButton)
                .addGap(88, 88, 88))
        );

        pack();
    }// </editor-fold>                        
 
    private void readCardButton(java.awt.event.ActionEvent evt) {                                
        String filePath = "C:\\Users\\Marcus Woodburn\\Documents\\";
        String fileName = "employeeCardInfo.txt";
        
        char[] password = password_box.getPassword();
        String strPass = new String(password); //Converts from char array to string
        
        //Acts as a test to see if text is valid,
        //if not, this displays the error and does
        //not allow the form to close
        if(!validateInput(strPass)){
            toggleError("Error reading card, please try again");
        }
        
        //Encrypts string directly after it is collected and BEFORE it is passed or written to the file
        strPass = encrypt(strPass);
        writeToFile(strPass , filePath , fileName);
    }                               

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        this.dispose();
        System.exit(0);
    }                                          

    /**
     * Makes an error message appear if the input is invalid
     * 
     * @param errMessage 
     */
    public void toggleError(String errMessage){
        errorLabel.setText(errMessage);
        errorLabel.setVisible(true);
    }
    
    /**
     * Tests if the input is valid
     * 
     * @param rawData
     * @return true if input contains three '?' false otherwise
     */
    private boolean validateInput(String rawData){
        int numOfQuestionMarks = 0;
            
        for(int i = 0; i < rawData.length(); i++){
            System.out.println(rawData.charAt(i));
                if(rawData.charAt(i) == '?'){
                    numOfQuestionMarks++;
                }

        } //end for 
        return numOfQuestionMarks == 3;
    }
    
    /**
     * @param args the command line arguments
     */
    @SuppressWarnings("Convert2Lambda")
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dialogue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Dialogue().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel headerBox;
    private javax.swing.JPasswordField password_box;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton readCardButton;
    // End of variables declaration                   
}
